package com.moumou.bootmybatisdemo.serviceinterfaceimp.db;import com.moumou.bootmybatisdemo.serviceinterfaceimp.dao.SourceFieldDao;import com.moumou.bootmybatisdemo.serviceinterfaceimp.dao.SourceTableDao;import com.moumou.bootmybatisdemo.dataAlignment.model.MetaSrcColumn;import com.moumou.bootmybatisdemo.dataAlignment.model.SourceField;import com.moumou.bootmybatisdemo.dataAlignment.model.SourceSystem;import com.moumou.bootmybatisdemo.dataAlignment.model.SourceTable;import java.sql.*;import java.text.DecimalFormat;import java.util.*;public class ColumnTest {    //    static HashMap<String, String> one = new HashMap<String, String>() {//        {//            put("dttransacc", "nchar");//            put("dttime", "int");//            put("dttaacc", "nchar");//            put("dtstkqty", "bigint");//            put("dtstkname", "nchar");//            put("dtstkid", "int");//            put("dtstkcode", "nchar");//            put("dtstation", "nchar");//            put("dtsno", "int");//            put("dtsecuid", "nchar");//            put("dtseat", "nchar");//            put("dtrate", "bigint");//            put("dtqty2", "bigint");//            put("dtqty", "int");//            put("dtprice9", "bigint");//            put("dtprice4", "bigint");//            put("dtprice", "bigint");//            put("dtpercent", "bigint");//            put("dtorgid", "nchar");//            put("dtorder", "nchar");//            put("dtoperid", "int");//            put("dtoftrdid", "nchar");//            put("dtofprice", "bigint");//            put("dtname", "nchar");//            put("dtmputy", "bigint");//            put("dtmatchcode", "nvarchar");//            put("dtkinds", "nvarchar");//            put("dtkind", "nchar");//            put("dtint64", "bigint");//            put("dtint", "int");//            put("dtincome", "bigint");//            put("dtidno", "nchar");//            put("dtfundid", "bigint");//            put("dtfeekind", "nvarchar");//            put("dtfeeid", "nvarchar");//            put("dtfee", "bigint");//            put("dtdate", "int");//            put("dtcustid", "bigint");//            put("dtctrlvalue", "bigint");//            put("dtchar9", "nvarchar");//            put("dtchar80", "nvarchar");//            put("dtchar8", "nvarchar");//            put("dtchar64", "nvarchar");//            put("dtchar60", "nvarchar");//            put("dtchar6", "nchar");//            put("dtchar512", "nvarchar");//            put("dtchar5", "nchar");//            put("dtchar48", "nvarchar");//            put("dtchar4000", "nvarchar");//            put("dtchar40", "nvarchar");//            put("dtchar4", "nchar");//            put("dtchar36", "nvarchar");//            put("dtchar32", "nvarchar");//            put("dtchar30", "nvarchar");//            put("dtchar3", "nchar");//            put("dtchar28", "nvarchar");//            put("dtchar255", "nvarchar");//            put("dtchar24", "nvarchar");//            put("dtchar22", "nvarchar");//            put("dtchar2048", "nvarchar");//            put("dtchar200", "nvarchar");//            put("dtchar20", "nvarchar");//            put("dtchar2", "nchar");//            put("dtchar18", "nvarchar");//            put("dtchar16", "nvarchar");//            put("dtchar128", "nvarchar");//            put("dtchar120", "nvarchar");//            put("dtchar12", "nchar");//            put("dtchar1024", "nvarchar");//            put("dtchar100", "nvarchar");//            put("dtchar10", "nchar");//            put("dtbranch", "nchar");//            put("dtbondacc", "nchar");//            put("dtbknet", "nchar");//            put("dtbkbrh", "nchar");//            put("dtbankid", "nvarchar");//            put("dtamt", "bigint");//            put("dt_date", "number");//            put("dt_int16", "number");//            put("dt_int32", "number");//            put("dt_int64", "number");//            put("dt_money", "number");//            put("dt_price", "number");//            put("dt_rate", "number");//            put("dt_time", "number");//            put("dt_timestamp", "number");//            put("ot_account", "number");//            put("xml", "varchar2");//            put("cprice", "number");//            put("cmoney", "number");//            put("dt_quantity", "number");//            put("dtmoney", "number");//        }//    };    static HashMap<String, String> columnTypeMap = new HashMap<>();    static List<String> codeRateDataTooLong = new ArrayList<>();    static List<SourceField> sourceFieldList = null;    static List<SourceTable> sourceTableList = null;    List<MetaSrcColumn> metaSrcColumnList = null;    private static SourceFieldDao sourceFieldDao = new SourceFieldDao();    private static SourceTableDao sourceTableDao = new SourceTableDao();    /**     * @param type columntype类型转换     * @return     */    public static String getConvertType(String type) {        if (columnTypeMap.containsKey(type.toLowerCase())) {            return columnTypeMap.get(type.toLowerCase());        } else {            return type;        }    }    /**     * 得到百分比注意不加"%"     *     * @param a     * @param b     * @return String     */    public static String getRate(int a, int b) {        DecimalFormat df = new DecimalFormat("0.00");//设置保留位数        return df.format((float) a / b * 100);    }    /**     * @return 获取所有系统的Code     */    public static HashMap<String, String> getCode() {        HashMap<String, String> codeMap = new HashMap<String, String>();        //查找语句        String sqlString = "SELECT sc.sys,sc.db_sid,sc.db_schema,sc.table_name,sc.column_name from src_column sc JOIN src_table st " +                "where sc.sys=st.sys and sc.db_sid = st.db_sid and sc.db_schema = st.table_schema and sc.table_name = st.table_name";        JdbcConnection jdbcConn = new JdbcConnection("edw", "edw123456", "192.10.30.15", "3306", "edw_dev", "mysql");        Connection connection = jdbcConn.getDbConnection();        ResultSet resultSet = null;        try {            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);            resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                String sys = resultSet.getString("sys");                String dbSid = resultSet.getString("db_sid");                String tableSchema = resultSet.getString("db_schema");                String tableName = resultSet.getString("table_name");                String columnName = resultSet.getString("column_name");                String key = sys + "," + dbSid + "," + tableSchema + "," + tableName.toLowerCase() + "," + columnName.toLowerCase();                codeMap.put(key, "");            }            //srcdbToTgtdb.createTableScript("mysql","KFM", "dbo");        } catch (Exception e) {            e.printStackTrace();        } finally {            jdbcConn.closeDbConnection();        }        return codeMap;    }    /**     * 获取所有的sql server中的自定义类型与实际类型的转换     *     * @param sys     * @param dbsid     * @param dbschema     * @throws SQLException     */    public static void getColumnTypeMap(String sys, String dbsid, String dbschema) throws SQLException {        Connection conn = DbcpUtil.getConnection(sys, dbsid, dbschema);        Statement stat = conn.createStatement();        String sql = "select A.name as src_type_name,B.name as tgt_type_name from (select name,xtype from systypes where xtype<>xusertype group by name,xtype) " +                "as A left join (select name,xtype from systypes where xtype=xusertype group by name,xtype) as B on A.xtype=B.xtype";        ResultSet ColumnTypeConvertRs = stat.executeQuery(sql);        while (ColumnTypeConvertRs.next()) {            String key = ColumnTypeConvertRs.getString("src_type_name");            String value = ColumnTypeConvertRs.getString("tgt_type_name");            if (key != null && value != null) {                columnTypeMap.put(key, value);            }        }        stat.close();        conn.close();    }    /**     * 列类型转换     *     * @param type     * @return     */    public static String getColumnTypeConvert(String type) {        if (columnTypeMap.containsKey(type)) {            return columnTypeMap.get(type);        } else {            return type;        }    }    public static HashSet<String> getCheckColumn() {        HashSet<String> set = new HashSet<>();        //查找语句        String sqlString = "SELECT sys,db_sid,table_schema,table_name,column_name from src_tab_code_meta";        JdbcConnection jdbcConn = new JdbcConnection("edw", "edw123456", "192.10.30.15", "3306", "edw_dev", "mysql");        Connection connection = jdbcConn.getDbConnection();        ResultSet resultSet = null;        try {            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);            resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                String sys = resultSet.getString("sys");                String dbSid = resultSet.getString("db_sid");                String tableSchema = resultSet.getString("table_schema");                String tableName = resultSet.getString("table_name");                String columnName = resultSet.getString("column_name");                String key = sys + "," + dbSid + "," + tableSchema + "," + tableName.toLowerCase() + "," + columnName.toLowerCase();                set.add(key);            }            //srcdbToTgtdb.createTableScript("mysql","KFM", "dbo");        } catch (Exception e) {            e.printStackTrace();        } finally {            jdbcConn.closeDbConnection();        }        return set;    }    ;    public static void main(String[] args) {        ColumnTest columnTest = new ColumnTest();//        Iterator iter = DbcpUtil.systemHashMaps.entrySet().iterator();//        while (iter.hasNext()) {//            Map.Entry entry = (Map.Entry) iter.next();//            String key = (String) entry.getKey();//            SourceSystem val = (SourceSystem) entry.getValue();//            //columnTest.fetchTableColumnMetaBySystem(val.getSys(), val.getDbSid(), val.getDbSchema());//            System.out.println("columnTest.fetchTableColumnMetaBySystem(\"" + val.getSys() + "\",\"" + val.getDbSid() + "\",\"" + val.getDbSchema() + "\");");//        }//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EI_SRCDATA");//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_STD_HIST");//        columnTest.fetchTableColumnMetaBySystem("GPQQ","kbssoptsett","dbo");//        columnTest.fetchTableColumnMetaBySystem("ZJGL","kbssfms","dbo");        columnTest.fetchTableColumnMetaBySystem("GZZG","tagzcs","HSFA");//        columnTest.fetchTableColumnMetaBySystem("JZJY","run","dbo");//        columnTest.fetchTableColumnMetaBySystem("GZZY","hsfa1","HSFA");//        columnTest.fetchTableColumnMetaBySystem("CRM","kdcc30data","dbo");//        columnTest.fetchTableColumnMetaBySystem("XTPB","ttmgrportal","ttmgrportal"); //(密码)//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_CLEAR");//        columnTest.fetchTableColumnMetaBySystem("O32","orcl","TRADE");//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_CUSTACCT");//        columnTest.fetchTableColumnMetaBySystem("OTC","otcdb1","OTCNEWSETT");//        columnTest.fetchTableColumnMetaBySystem("JZJY","his","dbo");//        columnTest.fetchTableColumnMetaBySystem("RZRQ","run","dbo");//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_DEPACCT");//        columnTest.fetchTableColumnMetaBySystem("GPQQ","opt_stds","dbo");//        columnTest.fetchTableColumnMetaBySystem("THXT","WKIB","dbo");//        columnTest.fetchTableColumnMetaBySystem("CPZX","pifdb1","KDPIF");//        columnTest.fetchTableColumnMetaBySystem("OTC","otcdb1","OTCTS");//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_PUB");//        columnTest.fetchTableColumnMetaBySystem("HSPB","pbdb","TRADE");//        columnTest.fetchTableColumnMetaBySystem("TYZH","kbssacct","dbo");//        columnTest.fetchTableColumnMetaBySystem("CPZX","pifdb1","KDETL");//        columnTest.fetchTableColumnMetaBySystem("HYZJ","WKWEB","dbo");//        columnTest.fetchTableColumnMetaBySystem("CPZX","pifdb1","KDPMS");//        columnTest.fetchTableColumnMetaBySystem("HSTA","tagzcs","HSTA4");//        columnTest.fetchTableColumnMetaBySystem("FRQS","orcl","EA_STD");//        columnTest.fetchTableColumnMetaBySystem("RZRQ","his","dbo");    }    /**     * 通过系统的表名来添加字段检查     *     * @param sys     * @param dbSid     * @param dbSchema     * @param dbType     * @param table     */    public void fetchTableColumnMetaByTable(String sys, String dbSid, String dbSchema, String dbType, String table) {        Connection srcJdbcConn = DbcpUtil.getConnection(sys, dbSid, dbSchema);        JdbcConnection tgtJdbcConn = new JdbcConnection("edw", "edw123456", "192.10.30.15", "3306", "edw_dev", "mysql");        java.sql.Connection tgtConn = tgtJdbcConn.getDbConnection();        try {            PreparedStatement pstm1 = null;            metaSrcColumnList = byTableNameGetColumnList(sys, dbSid, dbSchema, dbType, table);            String del = "DELETE FROM src_column_meta where sys='" + sys + "' and db_sid='" + dbSid + "' and table_schema='" + dbSchema + "' and table_name='" + table + "'";            pstm1 = tgtConn.prepareStatement(del);            pstm1.executeUpdate();            pstm1.close();        } catch (SQLException e) {            e.printStackTrace();        }        if (metaSrcColumnList != null && metaSrcColumnList.size() > 0) {            int i = 1;            for (MetaSrcColumn metaSrcColumn : metaSrcColumnList) {                System.out.println("INFO: " + "系统: " + sys + "数据库名称: " + dbSid + "数据库模式: " + dbSchema + "表名: " + metaSrcColumn.getTableName() + "字段名字: " + metaSrcColumn.getColumnName());                //MetaSrcTable metaTab = fetchTableMeta(srcConn,sourceSystems.getDbType(),srcTab);0                StringBuffer insertColumnSql = new StringBuffer();                insertColumnSql.append("insert into src_column_bak ");                insertColumnSql.append("(");                insertColumnSql.append("sys,");                insertColumnSql.append("db_sid,");                insertColumnSql.append("db_schema,");                insertColumnSql.append("table_name,");                insertColumnSql.append("column_id,");                insertColumnSql.append("column_name,");                insertColumnSql.append("column_type");                insertColumnSql.append(")");                insertColumnSql.append("values ");                insertColumnSql.append("(");                insertColumnSql.append("'").append(metaSrcColumn.getSys()).append("',");                insertColumnSql.append("'").append(metaSrcColumn.getDbSid()).append("',");                insertColumnSql.append("'").append(metaSrcColumn.getTableSchema()).append("',");                insertColumnSql.append("'").append(metaSrcColumn.getTableName()).append("',");                insertColumnSql.append("").append(i).append(",");                insertColumnSql.append("'").append(metaSrcColumn.getColumnName()).append("',");                insertColumnSql.append("'").append(metaSrcColumn.getColumnType()).append("'");                insertColumnSql.append(")");                StringBuffer insertSql = new StringBuffer();                insertSql.append("insert into src_column_meta ");                insertSql.append("(");                insertSql.append("sys,");                insertSql.append("db_sid,");                insertSql.append("table_schema,");                insertSql.append("table_name,");                insertSql.append("column_name,");                insertSql.append("column_desc,");                insertSql.append("column_type,");                insertSql.append("nullable,");                insertSql.append("total_count,");                insertSql.append("column_null_cnt,");                insertSql.append("column_null_rate,");                insertSql.append("column_max_val,");                insertSql.append("column_min_val,");                insertSql.append("code_rate,");                insertSql.append("legal_type,");                insertSql.append("remarks");                insertSql.append(")");                insertSql.append("values ");                insertSql.append("(");                insertSql.append("'").append(metaSrcColumn.getSys()).append("',");                insertSql.append("'").append(metaSrcColumn.getDbSid()).append("',");                insertSql.append("'").append(metaSrcColumn.getTableSchema()).append("',");                insertSql.append("'").append(metaSrcColumn.getTableName()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnName()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnDesc()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnType()).append("',");                insertSql.append("'").append(metaSrcColumn.getNullable()).append("',");                insertSql.append("").append(metaSrcColumn.getTotalCount()).append(",");                insertSql.append("").append(metaSrcColumn.getColumnNullCnt()).append(",");                insertSql.append("").append(metaSrcColumn.getColumnNullRate()).append(",");                insertSql.append("'").append(metaSrcColumn.getColumnMaxVal()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnMinVal()).append("',");                insertSql.append("'").append(metaSrcColumn.getCodeRate()).append("',");                insertSql.append("'").append(metaSrcColumn.getLegalType()).append("',");                insertSql.append("'").append(metaSrcColumn.getRemarks()).append("'");                insertSql.append(")");                i++;                PreparedStatement pstm = null;                PreparedStatement pstm1 = null;                try {                    System.out.println(insertColumnSql);                    pstm = tgtConn.prepareStatement(insertSql.toString());                    pstm1 = tgtConn.prepareStatement(insertColumnSql.toString());                    pstm.executeUpdate();                    pstm1.executeUpdate();                    pstm.close();                    pstm1.close();                } catch (SQLException e) {                    e.printStackTrace();                    continue;                }                System.out.println("Write Successful " + metaSrcColumn.getTableName() + "-----" + metaSrcColumn.getColumnName());                metaSrcColumnList = null;            }        }        System.out.println("INFO: " + sys + "Wirte Successful!");        try {            tgtConn.close();            srcJdbcConn.close();        } catch (SQLException e) {            e.printStackTrace();        }    }    /**     * 根据系统添加字段检查     *     * @param sys     * @param dbsid     * @param dbschema     */    public void fetchTableColumnMetaBySystem(String sys, String dbsid, String dbschema) {        Connection srcJdbcConn = DbcpUtil.getConnection(sys, dbsid, dbschema);        JdbcConnection tgtJdbcConn = new JdbcConnection("edw", "edw123456", "192.10.30.15", "3306", "edw_dev", "mysql");        java.sql.Connection tgtConn = tgtJdbcConn.getDbConnection();        try {            metaSrcColumnList = fetchTableColumnMeta(sys, dbsid, dbschema);        } catch (SQLException e) {            e.printStackTrace();        }        if (metaSrcColumnList != null && metaSrcColumnList.size() > 0) {////            sys	varchar	128	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            db_sid	varchar	32	0	0	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            table_schema	varchar	32	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            table_name	varchar	128	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            column_id	int	11	0	-1	0	0	0									0	0	0	0	0	0	0//            column_name	varchar	128	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            column_cn_name	varchar	255	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            column_desc	varchar	128	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            column_type	varchar	128	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            is_pk	varchar	255	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            nullable	char	1	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            total_count	int	11	0	-1	0	0	0									0	0	0	0	0	0	0//            column_null_cnt	int	11	0	-1	0	0	0									0	0	0	0	0	0	0//            column_null_rate	decimal	6	2	-1	0	0	0									0	0	0	0	0	0	0//            column_max_val	varchar	512	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            column_min_val	varchar	512	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            code_rate	longtext	0	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            legal_type	char	1	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0//            remarks	varchar	512	0	-1	0	0	0							utf8	utf8_general_ci	0	0	0	0	0	0	0            for (MetaSrcColumn metaSrcColumn : metaSrcColumnList) {                System.out.println("INFO: " + "系统: " + sys + "数据库名称: " + dbsid + "数据库模式: " + dbschema + "表名: " + metaSrcColumn.getTableName() + "字段名字: " + metaSrcColumn.getColumnName());                //MetaSrcTable metaTab = fetchTableMeta(srcConn,sourceSystems.getDbType(),srcTab);0                StringBuffer insertSql = new StringBuffer();                insertSql.append("insert into src_column_meta_bak ");                insertSql.append("(");                insertSql.append("sys,");                insertSql.append("db_sid,");                insertSql.append("table_schema,");                insertSql.append("table_name,");                insertSql.append("column_id,");                insertSql.append("column_name,");                insertSql.append("column_cn_name,");                insertSql.append("column_desc,");                insertSql.append("column_type,");                insertSql.append("is_pk,");                insertSql.append("nullable,");                insertSql.append("total_count,");                insertSql.append("column_null_cnt,");                insertSql.append("column_null_rate,");                insertSql.append("column_max_val,");                insertSql.append("column_min_val,");                insertSql.append("code_rate,");                insertSql.append("legal_type,");                insertSql.append("remarks");                insertSql.append(")");                insertSql.append("values ");                insertSql.append("(");                //                insertSql.append("db_sid,");                //                insertSql.append("table_schema,");                //                insertSql.append("table_name,");                //                insertSql.append("column_id,");                //                insertSql.append("column_name,");                //                insertSql.append("column_cn_name,");                //                insertSql.append("column_desc,");                //                insertSql.append("column_type,");                //                insertSql.append("is_pk,");                insertSql.append("'").append(metaSrcColumn.getSys()).append("',");                insertSql.append("'").append(metaSrcColumn.getDbSid()).append("',");                insertSql.append("'").append(metaSrcColumn.getTableSchema()).append("',");                insertSql.append("'").append(metaSrcColumn.getTableName()).append("',");                insertSql.append("").append(metaSrcColumn.getColumnId()).append(",");                insertSql.append("'").append(metaSrcColumn.getColumnName()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnCnName()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnDesc()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnType()).append("',");                insertSql.append("'").append(metaSrcColumn.getPk()).append("',");                insertSql.append("'").append(metaSrcColumn.getNullable()).append("',");                insertSql.append("").append(metaSrcColumn.getTotalCount()).append(",");                insertSql.append("").append(metaSrcColumn.getColumnNullCnt()).append(",");                insertSql.append("").append(metaSrcColumn.getColumnNullRate()).append(",");                insertSql.append("'").append(metaSrcColumn.getColumnMaxVal()).append("',");                insertSql.append("'").append(metaSrcColumn.getColumnMinVal()).append("',");                insertSql.append("'").append(metaSrcColumn.getCodeRate()).append("',");                insertSql.append("'").append(metaSrcColumn.getLegalType()).append("',");                insertSql.append("'").append(metaSrcColumn.getRemarks()).append("'");                insertSql.append(")");                System.out.println(insertSql.toString());                PreparedStatement pstm = null;                try {                    pstm = tgtConn.prepareStatement(insertSql.toString());                    pstm.executeUpdate();                    pstm.close();                } catch (SQLException e) {                    e.printStackTrace();                    continue;                }                System.out.println("Write Successful " + metaSrcColumn.getTableName() + "-----" + metaSrcColumn.getColumnName());                metaSrcColumnList = null;            }        }        System.out.println("INFO: " + sys + "Wirte Successful!");        try {            tgtConn.close();            srcJdbcConn.close();        } catch (SQLException e) {            e.printStackTrace();        }    }    public static SourceField getSourceField(SourceTable sourceTable ,String columnName){        for (SourceField sourceField : sourceFieldList) {            if (sourceField.getTable_nameString().equals(sourceTable.getTable_nameString())                    && sourceField.getSysString().equals(sourceTable.getSyString())                    && sourceField.getDb_sidString().equals(sourceTable.getDb_sidString())                    && sourceField.getDb_schemaString().equals(sourceTable.getTable_schemaString())                    && sourceField.getColumn_nameString().equals(columnName)            ) {               return sourceField;            }        }        return null;    }    /**     * @param sys      系统简称     * @param dbsid    数据库名字     * @param dbschema 数据可以schema     * @return List<MetaSrcColumn> 包含所有实体类MetaSrcCloumn的集合     * @throws SQLException     */    private static List<MetaSrcColumn> fetchTableColumnMeta(String sys, String dbsid, String dbschema) throws SQLException {        Connection conn = DbcpUtil.getConnection(sys, dbsid, dbschema);        List<MetaSrcColumn> metaSrcColumnList = new ArrayList<MetaSrcColumn>();        sourceFieldList = sourceFieldDao.getFieldInfo(sys, dbsid, dbschema);        sourceTableList = sourceTableDao.getTableInfo_Filter(sys, dbsid, dbschema);        String key = sys + "," + dbsid + "," + dbschema;        SourceSystem sourceSystem = DbcpUtil.systemHashMaps.get(key);        if (sourceSystem.getDbType().equalsIgnoreCase("mssql")) {            getColumnTypeMap(sys, dbsid, dbschema);        }//        if (sourceFieldList.size() > 0 ) {//            System.out.println(sys + "------" + dbsid + "-------" + dbschema + "check");//        }        DatabaseMetaData dmd = conn.getMetaData();        HashMap<String, String> codeMap = getCode();        HashSet<String> codSet = getCheckColumn();        for (SourceTable sourceTable : sourceTableList) {            System.out.println("ccc");            //sys + "," + dbSid + "," + tableSchema + "," + tableName.toLowerCase() + "," + columnName.toLowerCase();//            String checkString = sourceField.getSysString() + "," + sourceField.getDb_sidString() + "," + sourceField.getDb_schemaString() + ","//                    + sourceField.getTable_nameString().toLowerCase() + "," + sourceField.getColumn_nameString().toLowerCase();            ResultSet keyRs = dmd.getPrimaryKeys(null, null, sourceTable.getTable_nameString());            HashSet<String> pk = new HashSet<>();            while (keyRs.next()) {                pk.add(keyRs.getString("COLUMN_NAME"));                System.out.println("vvv");            }            keyRs.close();            //获取相同tablename 下的columns            ResultSet rs = dmd.getColumns(null, "%", sourceTable.getTable_nameString(), "%");            StringBuffer codeRate = new StringBuffer("");            //遍历columnss            int columnId = 1;            while (rs.next()) {                System.out.println("aaa");                System.out.println(rs.getString(1));                //每一条创建一个MetaSrcColumn对象存储                MetaSrcColumn metaSrcColumn = new MetaSrcColumn();                //sys                metaSrcColumn.setSys(sourceTable.getSyString());                //表类别（可能为空）  mssql是db_sid                String dbSid = rs.getString("TABLE_CAT");                if (dbSid == null) {                    dbSid = dbsid;                }                metaSrcColumn.setDbSid(dbSid);                //表模式（可能为空）,在oracle中获取的是命名空间, mssql: db_schema                String tableSchema = rs.getString("TABLE_SCHEM");                if (tableSchema == null) {                    tableSchema = dbschema;                }                metaSrcColumn.setTableSchema(tableSchema);                //表名                if (!DbcpUtil.systemHashMaps.get(sys + "," + dbsid + "," + dbschema).getDbSchema().equalsIgnoreCase(tableSchema)) {                    System.out.println(sys + "," + dbsid + "," + dbschema);                    continue;                }                String tableName = rs.getString("TABLE_NAME");                metaSrcColumn.setTableName(tableName);                //列名                String columnName = rs.getString("COLUMN_NAME");                //中文名字                boolean isPk = false;                if (pk.contains(columnName)) {                    isPk = true;                }                if (isPk) {                    metaSrcColumn.setPk("Y");                } else {                	metaSrcColumn.setPk("N");                }                                SourceField sourceField = getSourceField(sourceTable,columnName);                if (sourceField !=null){                    metaSrcColumn.setColumnCnName(sourceField.getColumn_cn_nameString());                }else {                    metaSrcColumn.setColumnCnName("null");                }                if (sourceSystem.getDbType().equalsIgnoreCase("mssql")) {                    columnName = getConvertType(columnName);                }                metaSrcColumn.setColumnName(columnName);                //int dataType = rs.getInt("DATA_TYPE");     //对应的java.sql.Types的SQL类型(列类型ID)                //列描述                metaSrcColumn.setColumnDesc(rs.getString("REMARKS"));                //列大小                int columnSize = rs.getInt("COLUMN_SIZE");                //小数位数                int decimalDigits = rs.getInt("DECIMAL_DIGITS");                //java.sql.Types类型名称(列类型名称)                String columnType = rs.getString("TYPE_NAME");                if (columnType.equalsIgnoreCase("text") || columnType.equalsIgnoreCase("xml")) {                    metaSrcColumn.setColumnType(columnType);                    int nullAble = rs.getInt("NULLABLE");  //是否允许为null                    if (nullAble == 1) {                        metaSrcColumn.setNullable("Y");                    } else if (nullAble == 0) {                        metaSrcColumn.setNullable("N");                    }                }else{                    String corventCol = columnType;                    columnType = getConvertType(columnType);                    if (columnType.split(" ").length > 1) {                        columnType = columnType.split(" ")[0];                    }                    if (columnType.toLowerCase().contains("char")) {                        //字符类型需要带长度信息                        metaSrcColumn.setColumnType(columnType + "(" + columnSize + ")");                    } else if (columnType.toLowerCase().contains("decimal")                            || columnType.toLowerCase().contains("number")                            || columnType.toLowerCase().contains("numeric")) {                        metaSrcColumn.setColumnType(columnType + "(" + columnSize + "," + decimalDigits + ")");                    } else {                        //其余的直接放                        metaSrcColumn.setColumnType(columnType);                    }                    /**                     *  0 (columnNoNulls) - 该列不允许为空                     *  1 (columnNullable) - 该列允许为空                     *  2 (columnNullableUnknown) - 不确定该列是否为空                     */                    int nullAble = rs.getInt("NULLABLE");  //是否允许为null                    if (nullAble == 1) {                        metaSrcColumn.setNullable("Y");                    } else if (nullAble == 0) {                        metaSrcColumn.setNullable("N");                    }                    //标记 System.out.println(tableName + "----------" + columnName);                    //列记录数                    Statement stat = conn.createStatement();                    ResultSet columnCountRs = stat.executeQuery("select count(" + columnName + ") as totalCount  from " + tableName);                    //System.out.println("select count(" + columnName + ") as totalCount  from " + tableName);//                java.sql.PreparedStatement columnCountPstm = conn.prepareStatement("select count(" + columnName + ") from " + tableName);//                java.sql.ResultSet columnCountRs = columnCountPstm.executeQuery();                    String totalCount = "";                    while (columnCountRs.next()) {                        totalCount = columnCountRs.getString("totalCount");                    }                    metaSrcColumn.setTotalCount(totalCount);                    stat.close();                    columnCountRs.close();                    //字段为空记录数//                java.sql.PreparedStatement columnNullCountPstm = conn.prepareStatement("select count(" + columnName//                        + ") from " + tableName + " where " + columnName + " is null ;");                    String columnNullCount = "";                    Statement stat1 = conn.createStatement();                    String nullratesql = "";                    if (columnType.toLowerCase().contains("char") || columnType.toLowerCase().contains("text")) {                        nullratesql = "select count(" + columnName                                + ") from " + tableName + " where " + columnName + " is null or " + columnName + "='' or " + columnName + "=' ' or " + columnName + "='  '";                    } else {                        nullratesql = "select count(" + columnName + ") from " + tableName + " where " + columnName + " is null";                    }                    java.sql.ResultSet columnNullCountRs = stat1.executeQuery(nullratesql);//                System.out.println("select count(" + columnName//                        + ") from " + tableName + " where " + columnName + " is null ");                    if (columnNullCountRs == null) {                        metaSrcColumn.setColumnNullCnt(columnNullCount + "");                    } else {                        while (columnNullCountRs.next()) {                            columnNullCount = columnNullCountRs.getString(1);                        }                        columnNullCountRs.close();                        metaSrcColumn.setColumnNullCnt(columnNullCount);                    }                    stat1.close();                    //字段空值率                    String columnNullRate = "0";                    if (Integer.parseInt(columnNullCount) > 0) {                        columnNullRate = getRate(Integer.parseInt(columnNullCount), Integer.parseInt(totalCount));                    }                    metaSrcColumn.setColumnNullRate(columnNullRate);                    //字段最大值                    if (columnName.toLowerCase().contains("date") || columnName.toLowerCase().contains("time") || columnType.toLowerCase().contains("int")                            || columnType.toLowerCase().contains("float") || columnType.toLowerCase().contains("double") || columnType.toLowerCase().contains("number")                            || columnType.toLowerCase().contains("decimal")) {                        //java.sql.PreparedStatement columnMaxPstm = conn.prepareStatement("select max(" + columnName + ") from " + tableName + ";");                        Statement stat2 = conn.createStatement();                        ResultSet columnMaxMinRs = stat2.executeQuery("select max(" + columnName + "),min(" + columnName + " ) from " + tableName);                        //java.sql.ResultSet columnMaxRs = columnMaxPstm.executeQuery();                        String columnMax = "";                        String columnMin = "";                        while (columnMaxMinRs.next()) {                            columnMax = columnMaxMinRs.getString(1);                            columnMin = columnMaxMinRs.getString(2);                        }                        metaSrcColumn.setColumnMaxVal(columnMax + "");                        metaSrcColumn.setColumnMinVal(columnMin + "");                        stat2.close();                        columnMaxMinRs.close();                    }                    //String key = sys + "," + dbSid + "," + tableSchema + "," + tableName + "," + columnName;                    //code_rate                    String check = sys + "," + dbsid + "," + dbschema + "," + tableName.toLowerCase() + "," + columnName.toLowerCase();                    if (codeMap.containsKey(check) && codSet.contains(check)) {                        // System.out.println(corventCol + "----" + columnType + "----" + columnName + "");                        if (!totalCount.equalsIgnoreCase("0") && !corventCol.contains("text")) {                            //HashMap<String, String> codeAndCount = new HashMap<>();                            String value = codeMap.get(check);                            String[] codeNameAndDescs = value.split("#");                            Statement stat3 = conn.createStatement();                            ResultSet codeNameAndDescsRs = stat3.executeQuery("select " + columnName + ",count(" + columnName + ") from " + tableName + " group by " + columnName);                            while (codeNameAndDescsRs.next()) {                                String codeName = "";                                String codeCount = "";                                if (codeNameAndDescsRs.getString(1) != null) {                                    codeName = codeNameAndDescsRs.getString(1).toLowerCase();                                }                                if (codeNameAndDescsRs.getString(2) != null) {                                    codeCount = codeNameAndDescsRs.getString(2).toLowerCase();                                }                                String rate = getRate(Integer.parseInt(codeCount), Integer.parseInt(totalCount));                                codeRate.append(codeName).append(":").append(codeCount).append("|").append(rate + "%");                                //                 codeAndCount.put(codeName, codeCount);                            }                            stat3.close();                            codeNameAndDescsRs.close();                        }                    }                    metaSrcColumn.setCodeRate(codeRate.toString());                    metaSrcColumn.setColumnId(columnId + "");                    columnId++;                    codeRate.setLength(0);                }//                if (i < 22 ) {//                    metaSrcColumn.setCodeRate(codeRate.toString());//                }else {//                    metaSrcColumn.setCodeRate("");//                    codeRateDataTooLong.add("系统: " + sys + " 表名字: " + tableName + " 列名字: " + columnName + " codeSize: "  + i + " code_rate: " + codeRate.toString() );//                }                //int numPrecRadix = rs.getInt("NUM_PREC_RADIX");  //基数（通常是10或2） --未知                //String columnDef = rs.getString("COLUMN_DEF");  //默认值                //int charOctetLength = rs.getInt("CHAR_OCTET_LENGTH");    // 对于 char 类型，该长度是列中的最大字节数                //int ordinalPosition = rs.getInt("ORDINAL_POSITION");   //表中列的索引（从1开始）                /**                 * ISO规则用来确定某一列的是否可为空(等同于NULLABLE的值:[ 0:'YES'; 1:'NO'; 2:''; ])                 * YES -- 该列可以有空值;                 * NO -- 该列不能为空;                 * 空字符串--- 不知道该列是否可为空                 */                // String isNullAble = rs.getString("IS_NULLABLE");                metaSrcColumnList.add(metaSrcColumn);            }            rs.close();        }        conn.close();        sourceFieldList = null;        sourceTableList = null;        return metaSrcColumnList;    }    /**     * 获取包含MetaSrcColumn对象的列表     *     * @param sys     * @param dbsid     * @param dbschema     * @param dbType     * @param table     * @return     * @throws SQLException     */    private static List<MetaSrcColumn> byTableNameGetColumnList(String sys, String dbsid, String dbschema, String dbType, String table) throws SQLException {        Connection conn = DbcpUtil.getConnection(sys, dbsid, dbschema);        List<MetaSrcColumn> metaSrcColumnList = new ArrayList<MetaSrcColumn>();        DatabaseMetaData dmd = conn.getMetaData();        HashMap<String, String> codeMap = getCode();        HashSet<String> codSet = getCheckColumn();        String key = sys + "," + dbsid + "," + dbschema;        SourceSystem sourceSystem = DbcpUtil.systemHashMaps.get(key);        if (sourceSystem.getDbType().equalsIgnoreCase("mssql")) {            getColumnTypeMap(sys, dbsid, dbschema);        }        java.sql.ResultSet rs = dmd.getColumns(null, dbschema, table, null);//        if (sourceSystem.getDbType().equalsIgnoreCase("mssql")) {//            getColumnTypeMap(sys, dbsid, dbschema);//        }        while (rs.next()) {            StringBuffer codeRate = new StringBuffer("");            //每一条创建一个MetaSrcColumn对象存储            MetaSrcColumn metaSrcColumn = new MetaSrcColumn();            //sys            metaSrcColumn.setSys(sys);            //表类别（可能为空）  mssql是db_sid            String dbSid = rs.getString("TABLE_CAT");            if (dbSid == null) {                dbSid = dbsid;            }            metaSrcColumn.setDbSid(dbSid);            //表模式（可能为空）,在oracle中获取的是命名空间, mssql: db_schema            String tableSchema = rs.getString("TABLE_SCHEM");            if (tableSchema == null) {                tableSchema = dbschema;            }            metaSrcColumn.setTableSchema(tableSchema);            //表名            if (!DbcpUtil.systemHashMaps.get(sys + "," + dbsid + "," + dbschema).getDbSchema().equalsIgnoreCase(tableSchema)) {                //System.out.println(sys + "," + dbsid + "," + dbschema);                continue;            }            String tableName = rs.getString("TABLE_NAME");            metaSrcColumn.setTableName(tableName);            //列名            String columnName = rs.getString("COLUMN_NAME");            if (dbType.equalsIgnoreCase("mssql") || dbType.toLowerCase().contains("server")) {                columnName = getConvertType(columnName);            }            metaSrcColumn.setColumnName(columnName);            //int dataType = rs.getInt("DATA_TYPE");     //对应的java.sql.Types的SQL类型(列类型ID)            //列描述            metaSrcColumn.setColumnDesc(rs.getString("REMARKS"));            //列大小            int columnSize = rs.getInt("COLUMN_SIZE");            //小数位数            int decimalDigits = rs.getInt("DECIMAL_DIGITS");            //java.sql.Types类型名称(列类型名称)            String columnType = rs.getString("TYPE_NAME");            if (columnType.equalsIgnoreCase("text") || columnType.equalsIgnoreCase("xml")) {                continue;            }            String corventCol = columnType;            columnType = getConvertType(columnType);            if (columnType.split(" ").length > 1) {                columnType = columnType.split(" ")[0];            }            if (columnType.contains("char")) {                //字符类型需要带长度信息                metaSrcColumn.setColumnType(columnType + "(" + columnSize + ")");            } else if (columnType.contains("float")                    || columnType.contains("double")                    || columnType.contains("decimal")                    || columnType.contains("number")                    || columnType.contains("numeric")) {                //浮点数类型，拼接                if (decimalDigits == 0) {                    metaSrcColumn.setColumnType(columnType);                } else {                    metaSrcColumn.setColumnType(columnType + "(" + columnSize + "," + decimalDigits + ")");                }            } else {                //其余的直接放                metaSrcColumn.setColumnType(columnType);            }            /**             *  0 (columnNoNulls) - 该列不允许为空             *  1 (columnNullable) - 该列允许为空             *  2 (columnNullableUnknown) - 不确定该列是否为空             */            int nullAble = rs.getInt("NULLABLE");  //是否允许为null            if (nullAble == 1) {                metaSrcColumn.setNullable("Y");            } else if (nullAble == 0) {                metaSrcColumn.setNullable("N");            }            //标记 System.out.println(tableName + "----------" + columnName);            //列记录数            Statement stat = conn.createStatement();            ResultSet columnCountRs = stat.executeQuery("select count(" + columnName + ") as totalCount  from " + tableName);            //System.out.println("select count(" + columnName + ") as totalCount  from " + tableName);//                java.sql.PreparedStatement columnCountPstm = conn.prepareStatement("select count(" + columnName + ") from " + tableName);//                java.sql.ResultSet columnCountRs = columnCountPstm.executeQuery();            String totalCount = "";            while (columnCountRs.next()) {                totalCount = columnCountRs.getString("totalCount");            }            metaSrcColumn.setTotalCount(totalCount);            stat.close();            columnCountRs.close();            //字段为空记录数//                java.sql.PreparedStatement columnNullCountPstm = conn.prepareStatement("select count(" + columnName//                        + ") from " + tableName + " where " + columnName + " is null ;");            String columnNullCount = "";            Statement stat1 = conn.createStatement();            String nullratesql = "";            if (columnType.toLowerCase().contains("char") || columnType.toLowerCase().contains("text")) {                nullratesql = "select count(" + columnName                        + ") from " + tableName + " where " + columnName + " is null or " + columnName + "='' or " + columnName + "=' ' or " + columnName + "='  '";            } else {                nullratesql = "select count(" + columnName + ") from " + tableName + " where " + columnName + " is null";            }            java.sql.ResultSet columnNullCountRs = stat1.executeQuery(nullratesql);//                System.out.println("select count(" + columnName//                        + ") from " + tableName + " where " + columnName + " is null ");            if (columnNullCountRs == null) {                metaSrcColumn.setColumnNullCnt(columnNullCount + "");            } else {                while (columnNullCountRs.next()) {                    columnNullCount = columnNullCountRs.getString(1);                }                columnNullCountRs.close();                metaSrcColumn.setColumnNullCnt(columnNullCount);            }            stat1.close();            //字段空值率            String columnNullRate = "0";            if (Integer.parseInt(columnNullCount) > 0) {                columnNullRate = getRate(Integer.parseInt(columnNullCount), Integer.parseInt(totalCount));            }            metaSrcColumn.setColumnNullRate(columnNullRate);            //字段最大值            if (columnName.toLowerCase().contains("date") || columnName.toLowerCase().contains("time") || columnType.toLowerCase().contains("int")                    || columnType.toLowerCase().contains("float") || columnType.toLowerCase().contains("double") || columnType.toLowerCase().contains("number")                    || columnType.toLowerCase().contains("decimal")) {                //java.sql.PreparedStatement columnMaxPstm = conn.prepareStatement("select max(" + columnName + ") from " + tableName + ";");                Statement stat2 = conn.createStatement();                ResultSet columnMaxMinRs = stat2.executeQuery("select max(" + columnName + "),min(" + columnName + " ) from " + tableName);                //java.sql.ResultSet columnMaxRs = columnMaxPstm.executeQuery();                String columnMax = "";                String columnMin = "";                while (columnMaxMinRs.next()) {                    columnMax = columnMaxMinRs.getString(1);                    columnMin = columnMaxMinRs.getString(2);                }                metaSrcColumn.setColumnMaxVal(columnMax + "");                metaSrcColumn.setColumnMinVal(columnMin + "");                stat2.close();                columnMaxMinRs.close();            }            //String key = sys + "," + dbSid + "," + tableSchema + "," + tableName + "," + columnName;            int i = 0;            //code_rate            String check = sys + "," + dbsid + "," + dbschema + "," + tableName.toLowerCase() + "," + columnName.toLowerCase();            if (codeMap.containsKey(check) && codSet.contains(check)) {                // System.out.println(corventCol + "----" + columnType + "----" + columnName + "");                if (!totalCount.equalsIgnoreCase("0") && !corventCol.contains("text")) {                    //HashMap<String, String> codeAndCount = new HashMap<>();                    String value = codeMap.get(check);                    String[] codeNameAndDescs = value.split("#");                    Statement stat3 = conn.createStatement();                    ResultSet codeNameAndDescsRs = stat3.executeQuery("select " + columnName + ",count(" + columnName + ") from " + tableName + " group by " + columnName);                    while (codeNameAndDescsRs.next()) {                        i++;                        String codeName = "";                        String codeCount = "";                        if (codeNameAndDescsRs.getString(1) != null) {                            codeName = codeNameAndDescsRs.getString(1).toLowerCase();                        }                        if (codeNameAndDescsRs.getString(2) != null) {                            codeCount = codeNameAndDescsRs.getString(2).toLowerCase();                        }                        String rate = getRate(Integer.parseInt(codeCount), Integer.parseInt(totalCount));                        codeRate.append(codeName).append(":").append(codeCount).append("|").append(rate + "%");                        //                 codeAndCount.put(codeName, codeCount);                    }                    stat3.close();                    codeNameAndDescsRs.close();                }            }            metaSrcColumn.setCodeRate(codeRate.toString());            codeRate.setLength(0);//                if (i < 22 ) {//                    metaSrcColumn.setCodeRate(codeRate.toString());//                }else {//                    metaSrcColumn.setCodeRate("");//                    codeRateDataTooLong.add("系统: " + sys + " 表名字: " + tableName + " 列名字: " + columnName + " codeSize: "  + i + " code_rate: " + codeRate.toString() );//                }            //int numPrecRadix = rs.getInt("NUM_PREC_RADIX");  //基数（通常是10或2） --未知            //String columnDef = rs.getString("COLUMN_DEF");  //默认值            //int charOctetLength = rs.getInt("CHAR_OCTET_LENGTH");    // 对于 char 类型，该长度是列中的最大字节数            //int ordinalPosition = rs.getInt("ORDINAL_POSITION");   //表中列的索引（从1开始）            /**             * ISO规则用来确定某一列的是否可为空(等同于NULLABLE的值:[ 0:'YES'; 1:'NO'; 2:''; ])             * YES -- 该列可以有空值;             * NO -- 该列不能为空;             * 空字符串--- 不知道该列是否可为空             */            // String isNullAble = rs.getString("IS_NULLABLE");            metaSrcColumnList.add(metaSrcColumn);        }        rs.close();        conn.close();        return metaSrcColumnList;    }}